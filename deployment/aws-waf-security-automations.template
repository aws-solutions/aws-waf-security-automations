AWSTemplateFormatVersion: 2010-09-09
Description: >-
  (SO0006) - AWS WAF Security Automations %%VERSION%%: This AWS CloudFormation template helps
  you provision the AWS WAF Security Automations stack without worrying about creating and
  configuring the underlying AWS infrastructure.

  **WARNING** This template creates an AWS Lambda function, an AWS WAF Web ACL, an Amazon S3 bucket,
  and an Amazon CloudWatch custom metric. You will be billed for the AWS resources used if you
  create a stack from this template.

  **NOTICE** Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved. Licensed under
  the Amazon Software License (the License). You may not use this file except in compliance with the
  License. A copy of the License is located at http://aws.amazon.com/asl/ or in the license file
  accompanying this file. This file is distributed on an AS IS BASIS, WITHOUT WARRANTIES OR
  CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing
  permissions and limitations under the License.


Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Protection List
        Parameters:
          - SqlInjectionProtectionParam
          - CrossSiteScriptingProtectionParam
          - ActivateHttpFloodProtectionParam
          - ActivateScannersProbesProtectionParam
          - ActivateReputationListsProtectionParam
          - ActivateBadBotProtectionParam

      - Label:
          default: Settings
        Parameters:
          - EndpointType
          - AccessLogBucket

      - Label:
          default: Advanced Settings
        Parameters:
          - RequestThreshold
          - ErrorThreshold
          - WAFBlockPeriod

    ParameterLabels:
      SqlInjectionProtectionParam:
        default: Activate SQL Injection Protection

      CrossSiteScriptingProtectionParam:
        default: Activate Cross-site Scripting Protection

      ActivateHttpFloodProtectionParam:
        default: Activate HTTP Flood Protection

      ActivateScannersProbesProtectionParam:
        default: Activate Scanner & Probe Protection

      ActivateReputationListsProtectionParam:
        default: Activate Reputation List Protection

      ActivateBadBotProtectionParam:
        default: Activate Bad Bot Protection

      EndpointType:
        default: Endpoint Type

      AccessLogBucket:
        default: Access Log Bucket Name

      RequestThreshold:
        default: Request Threshold

      ErrorThreshold:
        default: Error Threshold

      WAFBlockPeriod:
        default: WAF Block Period


Parameters:
  SqlInjectionProtectionParam:
    Type: String
    Default: 'yes'
    AllowedValues:
      - 'yes'
      - 'no'
    Description: Choose yes to enable the component designed to block common SQL injection attacks.

  CrossSiteScriptingProtectionParam:
    Type: String
    Default: 'yes'
    AllowedValues:
      - 'yes'
      - 'no'
    Description: Choose yes to enable the component designed to block common XSS attacks.

  ActivateHttpFloodProtectionParam:
    Type: String
    Default: 'yes'
    AllowedValues:
      - 'yes'
      - 'no'
    Description: Choose yes to enable the component designed to block HTTP flood attacks.

  ActivateScannersProbesProtectionParam:
    Type: String
    Default: 'yes'
    AllowedValues:
      - 'yes'
      - 'no'
    Description: Choose yes to enable the component designed to block scanners and probes.

  ActivateReputationListsProtectionParam:
    Type: String
    Default: 'yes'
    AllowedValues:
      - 'yes'
      - 'no'
    Description: >-
      Choose yes to block requests from IP addresses on third-party reputation lists (supported
      lists: spamhaus, torproject, and emergingthreats).

  ActivateBadBotProtectionParam:
    Type: String
    Default: 'yes'
    AllowedValues:
      - 'yes'
      - 'no'
    Description: Choose yes to enable the component designed to block bad bots and content scrapers.

  EndpointType:
    Type: String
    Default: 'CloudFront'
    AllowedValues:
      - 'CloudFront'
      - 'ALB'
    Description: Select the type of resource being used.

  AccessLogBucket:
    Type: String
    Default: ''
    AllowedPattern: '(^$|^([a-z]|(\d(?!\d{0,2}\.\d{1,3}\.\d{1,3}\.\d{1,3})))([a-z\d]|(\.(?!(\.|-)))|(-(?!\.))){1,61}[a-z\d]$)'
    Description: >-
      Enter a name for the Amazon S3 bucket where you want to store access logs files. This can be
      the name of either an existing S3 bucket, or a new bucket that the template will create during
      stack launch (if it does not find a matching bucket name).

      The solution will modify the bucket's notification configuration to trigger the Log Parser AWS
      Lambda function whenever a new log file is saved in this bucket. More about bucket name
      restriction here: http://amzn.to/1p1YlU5

  RequestThreshold:
    Type: Number
    Default: 2000
    MinValue: 2000
    Description:  >-
      If you chose yes for the Activate HTTP Flood Protection parameter, enter the maximum
      acceptable requests per FIVE-minute period per IP address. Minimum value of 2000.
      If you chose to deactivate this protection, ignore this parameter.

  ErrorCodesRegex:
    Type: String
    Default: '400|403|404|405'
    Description:  >-
      If you chose yes for the Activate Scanners & Probes Protection parameter, enter a regular expression
      for the status codes you wish to block. If you chose to deactivate Scanners & Probes
      protection, ignore this parameter.


  ErrorThreshold:
    Type: Number
    Default: 50
    MinValue: 0
    Description:  >-
      If you chose yes for the Activate Scanners & Probes Protection parameter, enter the maximum
      acceptable bad requests per minute per IP. If you chose to deactivate Scanners & Probes
      protection, ignore this parameter.

  WAFBlockPeriod:
    Type: Number
    Default: 240
    MinValue: 0
    Description: >-
      If you chose yes for the Activate Scanners & Probes Protection parameters, enter the period
      (in minutes) to block applicable IP addresses. If you chose to deactivate this protection,
      ignore this parameter.


Conditions:
  SqlInjectionProtectionActivated: !Equals
    - !Ref SqlInjectionProtectionParam
    - 'yes'

  CrossSiteScriptingProtectionActivated: !Equals
    - !Ref CrossSiteScriptingProtectionParam
    - 'yes'

  HttpFloodProtectionActivated: !Equals
    - !Ref ActivateHttpFloodProtectionParam
    - 'yes'

  ScannersProbesProtectionActivated: !Equals
    - !Ref ActivateScannersProbesProtectionParam
    - 'yes'

  ReputationListsProtectionActivated: !Equals
    - !Ref ActivateReputationListsProtectionParam
    - 'yes'

  BadBotProtectionActivated: !Equals
    - !Ref ActivateBadBotProtectionParam
    - 'yes'

  LogParserActivated: !Equals
    - !Ref ActivateScannersProbesProtectionParam
    - 'yes'

  AlbEndpoint: !Equals
    - !Ref EndpointType
    - 'ALB'

  CloudFrontEndpoint: !Equals
    - !Ref EndpointType
    - 'CloudFront'

Mappings:
    SourceCode:
        General:
            S3Bucket: '%%BUCKET_NAME%%'
            KeyPrefix: "aws-waf-security-automations/%%VERSION%%"
    Solution:
        Data:
            SendAnonymousUsageData: 'Yes'
            LogLevel: 'INFO'

Resources:
  AlbStack:
    Type: 'AWS::CloudFormation::Stack'
    Condition: AlbEndpoint
    Properties:
      TemplateURL: !Join
        - '/'
        - - 'https://s3.amazonaws.com'
          - !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], !Ref 'AWS::Region']]
          - !FindInMap ["SourceCode", "General", "KeyPrefix"]
          - 'aws-waf-security-automations-alb.template'
      Parameters:
        SqlInjectionProtectionParam: !Ref SqlInjectionProtectionParam
        CrossSiteScriptingProtectionParam: !Ref CrossSiteScriptingProtectionParam
        ActivateHttpFloodProtectionParam: !Ref ActivateHttpFloodProtectionParam
        ActivateScannersProbesProtectionParam: !Ref ActivateScannersProbesProtectionParam
        ActivateReputationListsProtectionParam: !Ref ActivateReputationListsProtectionParam
        ActivateBadBotProtectionParam: !Ref ActivateBadBotProtectionParam
        AccessLogBucket: !Ref AccessLogBucket
        WafApiType: 'waf-regional'
        WafArnPrefix: !Join ['', ['arn:aws:waf-regional:', !Ref 'AWS::Region',':']]
        ParentStackName: !Ref 'AWS::StackName'

  CloudFrontStack:
    Type: 'AWS::CloudFormation::Stack'
    Condition: CloudFrontEndpoint
    Properties:
      TemplateURL: !Join
        - '/'
        - - 'https://s3.amazonaws.com'
          - !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], !Ref 'AWS::Region']]
          - !FindInMap ["SourceCode", "General", "KeyPrefix"]
          - 'aws-waf-security-automations-cloudfront.template'
      Parameters:
        SqlInjectionProtectionParam: !Ref SqlInjectionProtectionParam
        CrossSiteScriptingProtectionParam: !Ref CrossSiteScriptingProtectionParam
        ActivateHttpFloodProtectionParam: !Ref ActivateHttpFloodProtectionParam
        ActivateScannersProbesProtectionParam: !Ref ActivateScannersProbesProtectionParam
        ActivateReputationListsProtectionParam: !Ref ActivateReputationListsProtectionParam
        ActivateBadBotProtectionParam: !Ref ActivateBadBotProtectionParam
        AccessLogBucket: !Ref AccessLogBucket
        WafApiType: 'waf'
        WafArnPrefix: 'arn:aws:waf::'
        ParentStackName: !Ref 'AWS::StackName'

  LambdaWAFLogParserFunction:
    Type: 'AWS::Lambda::Function'
    Condition: LogParserActivated
    Properties:
      Description: !Join
        - ''
        - - >-
            This function parses access logs to identify suspicious behavior, such as an
            abnormal amount of errors. It then blocks those IP addresses for a customer-defined
            period of time. Parameters:
          - !Ref ErrorCodesRegex
          - ','
          - !Ref ErrorThreshold
          - ','
          - !Ref WAFBlockPeriod
          - '.'
      Handler: 'log-parser.lambda_handler'
      Role: !If [AlbEndpoint, !GetAtt AlbStack.Outputs.LambdaRoleLogParserArn, !GetAtt CloudFrontStack.Outputs.LambdaRoleLogParserArn]
      Code:
        S3Bucket: !Join ['-', [!FindInMap ["SourceCode", "General", "S3Bucket"], !Ref 'AWS::Region']]
        S3Key: !Join ['/', [!FindInMap ["SourceCode", "General", "KeyPrefix"], 'log-parser.zip']]
      Environment:
        Variables:
          OUTPUT_BUCKET: !Ref AccessLogBucket
          IP_SET_ID_BLACKLIST: !If [AlbEndpoint, !GetAtt AlbStack.Outputs.WAFBlacklistSet, !GetAtt CloudFrontStack.Outputs.WAFBlacklistSet]
          IP_SET_ID_AUTO_BLOCK: !If [AlbEndpoint, !GetAtt AlbStack.Outputs.WAFScannersProbesSet, !GetAtt CloudFrontStack.Outputs.WAFScannersProbesSet]
          BLACKLIST_BLOCK_PERIOD: !Ref WAFBlockPeriod
          BLOCK_ERROR_CODES: !Ref ErrorCodesRegex
          ERROR_PER_MINUTE_LIMIT: !Ref ErrorThreshold
          SEND_ANONYMOUS_USAGE_DATA: !FindInMap ["Solution", "Data", "SendAnonymousUsageData"]
          UUID: !GetAtt CreateUniqueID.UUID
          LIMIT_IP_ADDRESS_RANGES_PER_IP_MATCH_CONDITION: '10000'
          MAX_AGE_TO_UPDATE: '30'
          REGION: !Ref 'AWS::Region'
          LOG_TYPE: !If [AlbEndpoint, 'alb', 'cloudfront']
          METRIC_NAME_PREFIX: !Join ['', !Split ['-', !Ref 'AWS::StackName']]
          LOG_LEVEL: !FindInMap ["Solution", "Data", "LogLevel"]
          STACK_NAME: !Ref 'AWS::StackName'
      Runtime: python3.7
      MemorySize: 512
      Timeout: 300

  LambdaInvokePermissionLogParser:
    Type: 'AWS::Lambda::Permission'
    Condition: LogParserActivated
    Properties:
      FunctionName: !GetAtt LambdaWAFLogParserFunction.Arn
      Action: 'lambda:*'
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'

  LambdaWAFReputationListsParserFunction:
    Type: 'AWS::Lambda::Function'
    Condition: ReputationListsProtectionActivated
    Properties:
      Description: >-
        This lambda function checks third-party IP reputation lists hourly for new IP ranges to
        block. These lists include the Spamhaus Dont Route Or Peer (DROP) and Extended Drop (EDROP)
        lists, the Proofpoint Emerging Threats IP list, and the Tor exit node list.
      Handler: 'reputation-lists-parser.handler'
      Role: !If [AlbEndpoint, !GetAtt AlbStack.Outputs.LambdaRoleReputationListsParserArn, !GetAtt CloudFrontStack.Outputs.LambdaRoleReputationListsParserArn]
      Code:
        S3Bucket: !Join ['-', [!FindInMap ["SourceCode", "General", "S3Bucket"], !Ref 'AWS::Region']]
        S3Key: !Join ['/', [!FindInMap ["SourceCode", "General", "KeyPrefix"], 'reputation-lists-parser.zip']]
      Runtime: nodejs8.10
      MemorySize: 128
      Timeout: 300
      Environment:
        Variables:
          SEND_ANONYMOUS_USAGE_DATA: !FindInMap ["Solution", "Data", "SendAnonymousUsageData"]
          UUID: !GetAtt CreateUniqueID.UUID
          METRIC_NAME_PREFIX: !Join ['', !Split ['-', !Ref 'AWS::StackName']]
          LOG_LEVEL: !FindInMap ["Solution", "Data", "LogLevel"]

  LambdaWAFReputationListsParserEventsRule:
    Type: 'AWS::Events::Rule'
    Condition: ReputationListsProtectionActivated
    Properties:
      Description: Security Automations - WAF Reputation Lists
      ScheduleExpression: rate(1 hour)
      Targets:
        - Arn: !GetAtt LambdaWAFReputationListsParserFunction.Arn
          Id: LambdaWAFReputationListsParserFunction
          Input: !Join
            - ''
            - - '{"lists":'
              - >-
                [
                  {"url":"https://www.spamhaus.org/drop/drop.txt"},
                  {"url":"https://check.torproject.org/exit-addresses", "prefix":"ExitAddress"},
                  {"url":"https://rules.emergingthreats.net/fwrules/emerging-Block-IPs.txt"}
                ]
              - ',"apiType":"'
              - !If [AlbEndpoint, 'waf-regional', 'waf']
              - '","region":"'
              - !Ref 'AWS::Region'
              - '",'
              - '"ipSetIds": ['
              - '"'
              - !If [AlbEndpoint, !GetAtt AlbStack.Outputs.WAFReputationListsSet, !GetAtt CloudFrontStack.Outputs.WAFReputationListsSet]
              - '"'
              - ']}'

  LambdaInvokePermissionReputationListsParser:
    Type: 'AWS::Lambda::Permission'
    Condition: ReputationListsProtectionActivated
    Properties:
      FunctionName: !Ref LambdaWAFReputationListsParserFunction
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceArn: !GetAtt LambdaWAFReputationListsParserEventsRule.Arn

  LambdaWAFBadBotParserFunction:
    Type: 'AWS::Lambda::Function'
    Condition: BadBotProtectionActivated
    Properties:
      Description: >-
        This lambda function will intercepts and inspects trap endpoint requests to extract its IP
        address, and then add it to an AWS WAF block list.
      Handler: 'access-handler.lambda_handler'
      Role: !If [AlbEndpoint, !GetAtt AlbStack.Outputs.LambdaRoleBadBotArn, !GetAtt CloudFrontStack.Outputs.LambdaRoleBadBotArn]
      Code:
        S3Bucket: !Join ['-', [!FindInMap ["SourceCode", "General", "S3Bucket"], !Ref 'AWS::Region']]
        S3Key: !Join ['/', [!FindInMap ["SourceCode", "General", "KeyPrefix"], 'access-handler.zip']]
      Environment:
        Variables:
          IP_SET_ID_BAD_BOT: !If [AlbEndpoint, !GetAtt AlbStack.Outputs.WAFBadBotSet, !GetAtt CloudFrontStack.Outputs.WAFBadBotSet]
          SEND_ANONYMOUS_USAGE_DATA: !FindInMap ["Solution", "Data", "SendAnonymousUsageData"]
          UUID: !GetAtt CreateUniqueID.UUID
          REGION: !Ref 'AWS::Region'
          LOG_TYPE: !If [AlbEndpoint, 'alb', 'cloudfront']
          METRIC_NAME_PREFIX: !Join ['', !Split ['-', !Ref 'AWS::StackName']]
          LOG_LEVEL: !FindInMap ["Solution", "Data", "LogLevel"]
      Runtime: python3.7
      MemorySize: 128
      Timeout: 300

  LambdaInvokePermissionBadBot:
    Type: 'AWS::Lambda::Permission'
    Condition: BadBotProtectionActivated
    Properties:
      FunctionName: !GetAtt LambdaWAFBadBotParserFunction.Arn
      Action: 'lambda:*'
      Principal: apigateway.amazonaws.com

  ApiGatewayBadBot:
    Type: 'AWS::ApiGateway::RestApi'
    Condition: BadBotProtectionActivated
    Properties:
      Name: Security Automations - WAF Bad Bot API
      Description: >-
        API created by AWS WAF Security Automations CloudFormation template. This endpoint will be
        used to capture bad bots.

  ApiGatewayBadBotResource:
    Type: 'AWS::ApiGateway::Resource'
    Condition: BadBotProtectionActivated
    Properties:
      RestApiId: !Ref ApiGatewayBadBot
      ParentId: !GetAtt ApiGatewayBadBot.RootResourceId
      PathPart: '{proxy+}'

  ApiGatewayBadBotMethodRoot:
    Type: 'AWS::ApiGateway::Method'
    Condition: BadBotProtectionActivated
    DependsOn: LambdaInvokePermissionBadBot
    Properties:
      RestApiId: !Ref ApiGatewayBadBot
      ResourceId: !GetAtt ApiGatewayBadBot.RootResourceId
      HttpMethod: ANY
      AuthorizationType: NONE
      RequestParameters:
        method.request.header.X-Forwarded-For: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt LambdaWAFBadBotParserFunction.Arn
            - /invocations

  ApiGatewayBadBotMethod:
    Type: 'AWS::ApiGateway::Method'
    Condition: BadBotProtectionActivated
    DependsOn: LambdaInvokePermissionBadBot
    Properties:
      RestApiId: !Ref ApiGatewayBadBot
      ResourceId: !Ref ApiGatewayBadBotResource
      HttpMethod: ANY
      AuthorizationType: NONE
      RequestParameters:
        method.request.header.X-Forwarded-For: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt LambdaWAFBadBotParserFunction.Arn
            - /invocations

  ApiGatewayBadBotDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Condition: BadBotProtectionActivated
    DependsOn: ApiGatewayBadBotMethod
    Properties:
      RestApiId: !Ref ApiGatewayBadBot
      Description: CloudFormation Deployment Stage
      StageName: CFDeploymentStage

  ApiGatewayBadBotStage:
    Type: 'AWS::ApiGateway::Stage'
    Condition: BadBotProtectionActivated
    Properties:
      DeploymentId: !Ref ApiGatewayBadBotDeployment
      Description: Production Stage
      RestApiId: !Ref ApiGatewayBadBot
      StageName: ProdStage

  LambdaWAFCustomResourceFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: >-
        This lambda function configures the Web ACL rules based on the features enabled in the
        CloudFormation template.
      Handler: 'custom-resource.lambda_handler'
      Role: !If [AlbEndpoint, !GetAtt AlbStack.Outputs.LambdaRoleCustomResourceArn, !GetAtt CloudFrontStack.Outputs.LambdaRoleCustomResourceArn]
      Code:
        S3Bucket: !Join ['-', [!FindInMap ["SourceCode", "General", "S3Bucket"], !Ref 'AWS::Region']]
        S3Key: !Join ['/', [!FindInMap ["SourceCode", "General", "KeyPrefix"], 'custom-resource.zip']]
      Environment:
        Variables:
          API_TYPE: !If [AlbEndpoint, 'waf-regional', 'waf']
          LOG_LEVEL: !FindInMap ["Solution", "Data", "LogLevel"]
      Runtime: python3.7
      MemorySize: 128
      Timeout: 300

  CreateUniqueID:
    Type: 'Custom::CreateUUID'
    Properties:
      ServiceToken: !GetAtt LambdaWAFCustomResourceFunction.Arn

  ConfigureAccessLogBucket:
    Type: 'Custom::ConfigureAccessLogBucket'
    Condition: LogParserActivated
    Properties:
      ServiceToken: !GetAtt LambdaWAFCustomResourceFunction.Arn
      Region: !Ref 'AWS::Region'
      AccessLogBucket: !Ref AccessLogBucket
      LambdaWAFLogParserFunction: !GetAtt LambdaWAFLogParserFunction.Arn

  ConfigureRateBasedRule:
    Type: 'Custom::ConfigureRateBasedRule'
    Condition: HttpFloodProtectionActivated
    Properties:
      ServiceToken: !GetAtt LambdaWAFCustomResourceFunction.Arn
      StackName: !Ref 'AWS::StackName'
      RequestThreshold: !Ref RequestThreshold
      MetricNamePrefix: !Join ['', !Split ['-', !Ref 'AWS::StackName']]

  ConfigureWebAcl:
    Type: 'Custom::ConfigureWebAcl'
    Properties:
      ServiceToken: !GetAtt LambdaWAFCustomResourceFunction.Arn
      # Stack input params
      SqlInjectionProtectionActivated: !Ref SqlInjectionProtectionParam
      CrossSiteScriptingProtectionActivated: !Ref CrossSiteScriptingProtectionParam
      HttpFloodProtectionActivated: !Ref ActivateHttpFloodProtectionParam
      ScannersProbesProtectionActivated: !Ref ActivateScannersProbesProtectionParam
      ReputationListsProtectionActivated: !Ref ActivateReputationListsProtectionParam
      BadBotProtectionActivated: !Ref ActivateBadBotProtectionParam
      # AWS WAF Web ACL
      WAFWebACL: !If [AlbEndpoint, !GetAtt AlbStack.Outputs.WAFWebACL, !GetAtt CloudFrontStack.Outputs.WAFWebACL]
      # AWS WAF Rules
      WAFWhitelistRule: !If [AlbEndpoint, !GetAtt AlbStack.Outputs.WAFWhitelistRule, !GetAtt CloudFrontStack.Outputs.WAFWhitelistRule]
      WAFBlacklistRule: !If [AlbEndpoint, !GetAtt AlbStack.Outputs.WAFBlacklistRule, !GetAtt CloudFrontStack.Outputs.WAFBlacklistRule]
      WAFSqlInjectionRule: !If [SqlInjectionProtectionActivated, !If [AlbEndpoint, !GetAtt AlbStack.Outputs.WAFSqlInjectionRule, !GetAtt CloudFrontStack.Outputs.WAFSqlInjectionRule], !Ref 'AWS::NoValue']
      WAFXssRule: !If [CrossSiteScriptingProtectionActivated, !If [AlbEndpoint, !GetAtt AlbStack.Outputs.WAFXssRule, !GetAtt CloudFrontStack.Outputs.WAFXssRule], !Ref 'AWS::NoValue']
      RateBasedRule: !If [HttpFloodProtectionActivated, !GetAtt ConfigureRateBasedRule.RateBasedRuleId, !Ref 'AWS::NoValue']
      WAFScannersProbesRule: !If [LogParserActivated, !If [AlbEndpoint, !GetAtt AlbStack.Outputs.WAFScannersProbesRule, !GetAtt CloudFrontStack.Outputs.WAFScannersProbesRule], !Ref 'AWS::NoValue']
      WAFIPReputationListsRule: !If [ReputationListsProtectionActivated, !If [AlbEndpoint, !GetAtt AlbStack.Outputs.WAFIPReputationListsRule, !GetAtt CloudFrontStack.Outputs.WAFIPReputationListsRule], !Ref 'AWS::NoValue']
      WAFBadBotRule: !If [BadBotProtectionActivated, !If [AlbEndpoint, !GetAtt AlbStack.Outputs.WAFBadBotRule, !GetAtt CloudFrontStack.Outputs.WAFBadBotRule], !Ref 'AWS::NoValue']
      # AWS WAF IP Sets
      WAFWhitelistSet: !If [AlbEndpoint, !GetAtt AlbStack.Outputs.WAFWhitelistSet, !GetAtt CloudFrontStack.Outputs.WAFWhitelistSet]
      WAFBlacklistSet: !If [AlbEndpoint, !GetAtt AlbStack.Outputs.WAFBlacklistSet, !GetAtt CloudFrontStack.Outputs.WAFBlacklistSet]
      WAFScannersProbesSet: !If [ScannersProbesProtectionActivated, !If [AlbEndpoint, !GetAtt AlbStack.Outputs.WAFScannersProbesSet, !GetAtt CloudFrontStack.Outputs.WAFScannersProbesSet], !Ref 'AWS::NoValue']
      WAFReputationListsSet: !If [ReputationListsProtectionActivated, !If [AlbEndpoint, !GetAtt AlbStack.Outputs.WAFReputationListsSet, !GetAtt CloudFrontStack.Outputs.WAFReputationListsSet], !Ref 'AWS::NoValue']
      WAFBadBotSet: !If [BadBotProtectionActivated, !If [AlbEndpoint, !GetAtt AlbStack.Outputs.WAFBadBotSet, !GetAtt CloudFrontStack.Outputs.WAFBadBotSet], !Ref 'AWS::NoValue']
      # Extra Info
      UUID: !GetAtt CreateUniqueID.UUID
      Region: !Ref 'AWS::Region'
      RequestThreshold: !Ref RequestThreshold
      ErrorThreshold: !Ref ErrorThreshold
      WAFBlockPeriod: !Ref WAFBlockPeriod
      SendAnonymousUsageData: !FindInMap ["Solution", "Data", "SendAnonymousUsageData"]

  PopulateReputationList:
    Type: 'Custom::PopulateReputationList'
    Condition: ReputationListsProtectionActivated
    Properties:
      ServiceToken: !GetAtt LambdaWAFCustomResourceFunction.Arn
      Region: !Ref 'AWS::Region'
      LambdaWAFReputationListsParserFunction: !GetAtt LambdaWAFReputationListsParserFunction.Arn
      WAFReputationListsSet: !If [AlbEndpoint, !GetAtt AlbStack.Outputs.WAFReputationListsSet, !GetAtt CloudFrontStack.Outputs.WAFReputationListsSet]

  MonitoringDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
          DashboardName: !Join ["-", [!Ref 'AWS::StackName', !Ref 'AWS::Region']]
          DashboardBody: !Join
            - ''
            - - '{'
              - '  "widgets": [{'
              - '    "type": "metric",'
              - '    "x": 0,'
              - '    "y": 0,'
              - '    "width": 15,'
              - '    "height": 10,'
              - '    "properties": {'
              - '      "view": "timeSeries",'
              - '      "stacked": false,'
              - '      "stat": "Sum",'
              - '      "period": 300,'
              - '      "metrics": ['
              - '        [ "WAF", "BlockedRequests", "WebACL", '
              - !Join ['', ['"', !If [AlbEndpoint, !GetAtt AlbStack.Outputs.WAFWebACLMetricName, !GetAtt CloudFrontStack.Outputs.WAFWebACLMetricName], '"']]
              - '        , "Rule", "ALL"'
              - !If [AlbEndpoint, !Join ["", [', "Region", "', !Ref 'AWS::Region', '"],']], '],']
              - '        [ "WAF", "AllowedRequests", "WebACL", '
              - !Join ['', ['"', !If [AlbEndpoint, !GetAtt AlbStack.Outputs.WAFWebACLMetricName, !GetAtt CloudFrontStack.Outputs.WAFWebACLMetricName], '"']]
              - '        , "Rule", "ALL"'
              - !If [AlbEndpoint, !Join ["", [', "Region", "', !Ref 'AWS::Region', '"]']], ']']
              - '      ],'
              - !If [AlbEndpoint, !Join ["", ['"region": "', !Ref 'AWS::Region', '"']], '"region": "us-east-1"']
              - '    }'
              - '  }]'
              - '}'

Outputs:
  BadBotHoneypotEndpoint:
    Description: Bad Bot Honeypot Endpoint
    Value: !Join
      - ''
      - - 'https://'
        - !Ref ApiGatewayBadBot
        - '.execute-api.'
        - !Ref 'AWS::Region'
        - '.amazonaws.com/'
        - !Ref ApiGatewayBadBotStage
    Condition: BadBotProtectionActivated
  WAFWebACL:
    Description: AWS WAF WebACL ID
    Value: !If [AlbEndpoint, !GetAtt AlbStack.Outputs.WAFWebACL, !GetAtt CloudFrontStack.Outputs.WAFWebACL]
